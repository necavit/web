#%RAML 0.8
title: Hades
version: '"arkh√©"'
baseUri: http://api.davidmr.es
mediaType: application/json
securitySchemes:
  - customAuthentication:
      type: x-Custom-Header
      describedBy:
        headers:
          X-Hades-API-Key:
            description: Your API key, which is application-private.
            required: true
            type: string
        responses:
          401:
            description: Unauthorized, if your request did not fulfill security restrictions.
            body:
              application/json:
                example: |
                  {
                    "errorType" : "unauthorized",
                    "reason" : "your API key is not valid or was not been provided"
                  }
securedBy: [customAuthentication]
/configuration:
  description: The game's global parameters (set on the server side - readonly).
  get:
    description: Retrieves the game parameters.
    responses:
      200:
        description: Ranges are given in meters.
        body:
          application/json:
            example: !include examples/example-configuration.json
/users:
  description: A collection of users' public information.
  post:
    description: |
      Creates a new user given the information provided in the request. Returns the created
      user's public information.
    body:
      application/json:
        example: |
          {
            "mail" : "john.doe@example.com",
            "displayName" : "John Doe",
            "lastPosition" : {
              "type" : "point",
              "coordinates" : [123.0, 234.0]
            },
            "type" : "human"
          }
    responses:
      200:
        description: A user with the given e-mail address already exists in the system.
        body:
          application/json:
            example: !include examples/example-user-public.json
      201:
        description: The user has been successfully created.
        body:
          application/json:
            example: !include examples/example-user-public.json
  /{userId}:
    description: A concrete user's public information.
    uriParameters:
        userId:
          description: The user's ID hash
          type: string
          required: true
    get:
      description: Retrieve a user's public information.
      responses:
        200:
          description: The user's information is available.
          body:
            application/json:
              example: !include examples/example-user-public.json
        400:
          description: Bad request, if the given userId does not match with any existing user.
    /lastPosition:
      description: The last geopositioned location of a concrete user.
      post:
        description: Updates the last position of the user with the given GeoJson object.
        body:
          application/json:
            example: !include examples/example-geojson.json
        responses:
          200:
            description: The user's last position has been updated.
          400:
            description: Bad request, if the user does not exist or the request body was not a valid GeoJson object.
    /attacks:
      description: A collection of a user's attacks.
      post:
        description: Creates a new Attack against another user and returns the result of the attack.
        body:
          application/json:
            example: !include examples/example-user-attack.json
        responses:
          201:
            description: The attack was successfully made. The result is available in the response body.
            body:
              application/json:
                example: !include examples/example-user-attack-result.json
          400:
            description: Bad request, if the requested attack cannot be performed or either the attacker or the defender don't exist as users.
            body:
              application/json:
                example: !include examples/example-user-attack-error.json
    /withinRange:
      description: A collection of users that are within the visibility range of the specified user.
      get:
        description: Retrieves the collection of visible users. Please note that the information returned is not the same as the public information, but a summary needed to display players in the map.
        responses:
          200:
            description: A collection of users in the visible range.
            body:
              application/json:
                example: !include examples/example-user-withinrange.json
              






